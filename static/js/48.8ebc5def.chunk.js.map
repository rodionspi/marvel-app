{"version":3,"file":"static/js/48.8ebc5def.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/pages/SingleChar/SingleCharPage.js","hooks/http.hook.js","resources/apiKey.js","services/MarvelService.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className='app_banner'>\n            <img src={avengers} alt='Avengers'/>\n            <div className=\"app_banner-text\">\n                New comics every week!<br/>\n                Stay turned!\n            </div> \n            <img src={avengersLogo} alt='Avengers logo'/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from \"./error.gif\";\n\nconst ErrorMessage = () => {\n    return (\n        <img src={img} alt=\"Error\" style={{ display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto' }} />\n    )\n}\n\nexport default ErrorMessage;","import { useParams, Link } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\n\nimport Spinner from '../../spinner/Spinner';\nimport ErrorMessage from '../../errorMessage/ErrorMessage';\nimport useMarvelService from '../../../services/MarvelService';\nimport AppBanner from '../../appBanner/AppBanner';\nimport './singleCharPage.scss';\n\nconst SingleCharPage = () => {\n    const {charId} = useParams();\n    const [char, setChar] = useState(null);\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar()\n    }, [charId]);\n\n    const updateChar = () => {\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n    return (\n        <>\n            <AppBanner/>\n            {errorMessage}\n            {spinner}\n            {content}\n        </>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail} = char;\n\n    return (\n        <div className=\"single-char\">\n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content={`Information about ${name}`}/>\n                <title>{name}</title>\n            </Helmet>\n            <img src={thumbnail} alt={name} className=\"single-char__img\"/>\n            <div className=\"single-char__info\">\n                <h2 className=\"single-char__name\">{name}</h2>\n                <p className=\"single-char__descr\">{description}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default SingleCharPage;","import {useState, useCallback} from 'react';\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-type': 'application/json'}) => {\n        \n        setLoading(true);\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            setLoading(false);\n            return data;\n        } catch (e) {\n            setLoading(false);\n            setError(e.message);\n            throw e;\n        }\n\n    }, []);\n\n    const clearError = useCallback(() => setError(null), []);\n\n    return {loading, request, error, clearError};\n}","export const _apiKey = 'd3f13d11d5d4eae693a008e15495c081';\nexport const _apiBase = 'https://gateway.marvel.com:443/v1/public/'","import { useHttp } from \"../hooks/http.hook\";\nimport {_apiKey, _apiBase} from \"../resources/apiKey\";\n\nconst useMarvelService = () => {\n\tconst { loading, request, error, clearError } = useHttp();\n\tconst _baseOffset = 210;\n\n\tconst getAllCharacters = async (offset = _baseOffset) => {\n\t\tconst res = await request(\n\t\t\t`${_apiBase}characters?limit=9&offset=${offset}&apikey=${_apiKey}`\n\t\t);\n\t\treturn res.data.results.map(_transformCharacter);\n\t};\n\n\t// Вариант модификации готового метода для поиска по имени.\n\t// Вызывать его можно вот так: getAllCharacters(null, name)\n\n\t// const getAllCharacters = async (offset = _baseOffset, name = '') => {\n\t//     const res = await request(`${_apiBase}characters?limit=9&offset=${offset}${name ? `&name=${name}` : '' }&${_apiKey}`);\n\t//     return res.data.results.map(_transformCharacter);\n\t// }\n\n\t// Или можно создать отдельный метод для поиска по имени\n\n\tconst getCharacterByName = async (name) => {\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&apikey=${_apiKey}`);\n\t\treturn res.data.results.map(_transformCharacter);\n\t};\n\n\tconst getCharacter = async (id) => {\n\t\tconst res = await request(`${_apiBase}characters/${id}?apikey=${_apiKey}`);\n\t\treturn _transformCharacter(res.data.results[0]);\n\t};\n\n\tconst getAllComics = async (offset = 0) => {\n\t\tconst res = await request(\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&apikey=${_apiKey}`\n\t\t);\n\t\treturn res.data.results.map(_transformComics);\n\t};\n\n\tconst getComic = async (id) => {\n\t\tconst res = await request(`${_apiBase}comics/${id}?apikey=${_apiKey}`);\n\t\treturn _transformComics(res.data.results[0]);\n\t};\n\n\tconst _transformCharacter = (char) => {\n\t\treturn {\n\t\t\tid: char.id,\n\t\t\tname: char.name,\n\t\t\tdescription: char.description\n\t\t\t\t? `${char.description.slice(0, 210)}...`\n\t\t\t\t: \"There is no description for this character\",\n\t\t\tthumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n\t\t\thomepage: char.urls[0].url,\n\t\t\twiki: char.urls[1].url,\n\t\t\tcomics: char.comics.items,\n\t\t};\n\t};\n\n\tconst _transformComics = (comics) => {\n\t\treturn {\n\t\t\tid: comics.id,\n\t\t\ttitle: comics.title,\n\t\t\tdescription: comics.description || \"There is no description\",\n\t\t\tpageCount: comics.pageCount\n\t\t\t\t? `${comics.pageCount} p.`\n\t\t\t\t: \"No information about the number of pages\",\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\n\t\t\tprice: comics.prices[0].price\n\t\t\t\t? `${comics.prices[0].price}$`\n\t\t\t\t: \"not available\",\n\t\t};\n\t};\n\n\treturn {\n\t\tloading,\n\t\terror,\n\t\tclearError,\n\t\tgetAllCharacters,\n\t\tgetCharacterByName,\n\t\tgetCharacter,\n\t\tgetAllComics,\n\t\tgetComic,\n\t};\n};\n\nexport default useMarvelService;"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","img","style","display","width","height","objectFit","margin","View","_ref","char","name","description","thumbnail","Helmet","content","concat","SingleCharPage","charId","useParams","setChar","useState","loading","error","getCharacter","clearError","useMarvelService","useEffect","updateChar","then","onCharLoaded","errorMessage","spinner","Spinner","_Fragment","_apiKey","_apiBase","request","useHttp","setLoading","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","status","data","json","e","message","_transformCharacter","id","slice","path","extension","homepage","urls","wiki","comics","items","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","getAllCharacters","offset","results","map","getCharacterByName","res","getAllComics","getComic"],"sourceRoot":""}