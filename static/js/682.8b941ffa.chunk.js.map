{"version":3,"file":"static/js/682.8b941ffa.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","hooks/http.hook.js","resources/apiKey.js","services/MarvelService.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className='app_banner'>\n            <img src={avengers} alt='Avengers'/>\n            <div className=\"app_banner-text\">\n                New comics every week!<br/>\n                Stay turned!\n            </div> \n            <img src={avengersLogo} alt='Avengers logo'/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from \"./error.gif\";\n\nconst ErrorMessage = () => {\n    return (\n        <img src={img} alt=\"Error\" style={{ display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto' }} />\n    )\n}\n\nexport default ErrorMessage;","import './comicsList.scss';\nimport { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\n\nconst ComicsList = () => {\n    const [comicsList, setComicsList] = useState([]);\n    const [newComicLoading, setNewComicLoading] = useState(false);\n    const [offset, setOffset] = useState(0);\n    const [comicsEnded, setComicsEnded] = useState(false);\n    \n    const {loading, error, getAllComics} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, []);\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewComicLoading(false) : setNewComicLoading(true);\n        getAllComics(offset)\n            .then(onComicsListLoaded)\n    }\n\n    const onComicsListLoaded = (newComicsList) => {\n        let ended = false;\n        if(newComicsList.length < 8) {\n            ended = true;\n        }\n        setComicsList([...comicsList, ...newComicsList]);\n        setNewComicLoading(false);\n        setOffset(offset + 8);\n        setComicsEnded(ended);\n    }\n\n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            return (\n                <li\n                    className=\"comics__item\"\n                    key={i}>\n                    <Link to={`/comics/${item.id}`}>\n                        <img src={item.thumbnail} alt={item.title} className=\"comics__item-img\"/>\n                        <div className=\"comics__item-name\">{item.title}</div>\n                        <div className=\"comics__item-price\">{item.price}</div>\n                    </Link>\n                </li>\n            )\n        });\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <ul className=\"comics__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    const items = renderItems(comicsList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading  && !newComicLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"comics__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newComicLoading}\n                style={{'display': comicsEnded ? 'none': 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;\n","import { Helmet } from \"react-helmet\";\n\nimport AppBanner from \"../appBanner/AppBanner\";\nimport ComicsList from \"../comicsList/ComicsList\";\n\nconst ComicsPage = () => {\n    return (\n        <>\n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content=\"Page with list of our comics\"/>\n                <title>Comics page</title>\n            </Helmet>\n            <AppBanner/>\n            <ComicsList/>\n        </>\n    )\n}\n\nexport default ComicsPage","import {useState, useCallback} from 'react';\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-type': 'application/json'}) => {\n        \n        setLoading(true);\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            setLoading(false);\n            return data;\n        } catch (e) {\n            setLoading(false);\n            setError(e.message);\n            throw e;\n        }\n\n    }, []);\n\n    const clearError = useCallback(() => setError(null), []);\n\n    return {loading, request, error, clearError};\n}","export const _apiKey = 'd3f13d11d5d4eae693a008e15495c081';\nexport const _apiBase = 'https://gateway.marvel.com:443/v1/public/'","import { useHttp } from \"../hooks/http.hook\";\nimport {_apiKey, _apiBase} from \"../resources/apiKey\";\n\nconst useMarvelService = () => {\n\tconst { loading, request, error, clearError } = useHttp();\n\tconst _baseOffset = 210;\n\n\tconst getAllCharacters = async (offset = _baseOffset) => {\n\t\tconst res = await request(\n\t\t\t`${_apiBase}characters?limit=9&offset=${offset}&apikey=${_apiKey}`\n\t\t);\n\t\treturn res.data.results.map(_transformCharacter);\n\t};\n\n\t// Вариант модификации готового метода для поиска по имени.\n\t// Вызывать его можно вот так: getAllCharacters(null, name)\n\n\t// const getAllCharacters = async (offset = _baseOffset, name = '') => {\n\t//     const res = await request(`${_apiBase}characters?limit=9&offset=${offset}${name ? `&name=${name}` : '' }&${_apiKey}`);\n\t//     return res.data.results.map(_transformCharacter);\n\t// }\n\n\t// Или можно создать отдельный метод для поиска по имени\n\n\tconst getCharacterByName = async (name) => {\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&apikey=${_apiKey}`);\n\t\treturn res.data.results.map(_transformCharacter);\n\t};\n\n\tconst getCharacter = async (id) => {\n\t\tconst res = await request(`${_apiBase}characters/${id}?apikey=${_apiKey}`);\n\t\treturn _transformCharacter(res.data.results[0]);\n\t};\n\n\tconst getAllComics = async (offset = 0) => {\n\t\tconst res = await request(\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&apikey=${_apiKey}`\n\t\t);\n\t\treturn res.data.results.map(_transformComics);\n\t};\n\n\tconst getComic = async (id) => {\n\t\tconst res = await request(`${_apiBase}comics/${id}?apikey=${_apiKey}`);\n\t\treturn _transformComics(res.data.results[0]);\n\t};\n\n\tconst _transformCharacter = (char) => {\n\t\treturn {\n\t\t\tid: char.id,\n\t\t\tname: char.name,\n\t\t\tdescription: char.description\n\t\t\t\t? `${char.description.slice(0, 210)}...`\n\t\t\t\t: \"There is no description for this character\",\n\t\t\tthumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n\t\t\thomepage: char.urls[0].url,\n\t\t\twiki: char.urls[1].url,\n\t\t\tcomics: char.comics.items,\n\t\t};\n\t};\n\n\tconst _transformComics = (comics) => {\n\t\treturn {\n\t\t\tid: comics.id,\n\t\t\ttitle: comics.title,\n\t\t\tdescription: comics.description || \"There is no description\",\n\t\t\tpageCount: comics.pageCount\n\t\t\t\t? `${comics.pageCount} p.`\n\t\t\t\t: \"No information about the number of pages\",\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\n\t\t\tprice: comics.prices[0].price\n\t\t\t\t? `${comics.prices[0].price}$`\n\t\t\t\t: \"not available\",\n\t\t};\n\t};\n\n\treturn {\n\t\tloading,\n\t\terror,\n\t\tclearError,\n\t\tgetAllCharacters,\n\t\tgetCharacterByName,\n\t\tgetCharacter,\n\t\tgetAllComics,\n\t\tgetComic,\n\t};\n};\n\nexport default useMarvelService;"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","img","style","display","width","height","objectFit","margin","ComicsList","comicsList","setComicsList","useState","newComicLoading","setNewComicLoading","offset","setOffset","comicsEnded","setComicsEnded","loading","error","getAllComics","useMarvelService","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","items","arr","map","item","i","Link","to","concat","id","thumbnail","title","price","renderItems","errorMessage","spinner","Spinner","disabled","onClick","ComicsPage","_Fragment","Helmet","name","content","_apiKey","_apiBase","request","clearError","useHttp","setLoading","setError","useCallback","async","url","method","arguments","undefined","body","headers","response","fetch","ok","Error","status","data","json","e","message","_transformCharacter","char","description","slice","path","extension","homepage","urls","wiki","comics","_transformComics","_comics$textObjects$","pageCount","language","textObjects","prices","getAllCharacters","results","getCharacterByName","getCharacter","res","getComic"],"sourceRoot":""}