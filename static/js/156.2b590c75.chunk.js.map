{"version":3,"file":"static/js/156.2b590c75.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/charSearch/CharSearch.js","components/pages/MainPage.js","hooks/http.hook.js","resources/apiKey.js","services/MarvelService.js"],"sourcesContent":["import img from \"./error.gif\";\n\nconst ErrorMessage = () => {\n    return (\n        <img src={img} alt=\"Error\" style={{ display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto' }} />\n    )\n}\n\nexport default ErrorMessage;","import { useState, useEffect } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError()\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded)\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    ) \n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    const imgStyle = thumbnail.includes('image_not_available') ? {'objectFit' : 'contain'} : {'objectFit' : 'cover'};\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className='randomchar__img' style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\n\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/Spinner';\n\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n    \n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, []);\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n    const onCharListLoaded = async (newCharList) => {\n\n        let ended = false;\n        if(newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList([...charList, ...newCharList]);\n        setNewItemLoading(false);\n        setOffset(offset + 9);\n        setCharEnded(ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail.includes('image_not_available.jpg')) {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <CSSTransition timeout={500} key={item.id} classNames=\"char__item\">\n                    <li \n                        tabIndex={0}\n                        ref={el => itemRefs.current[i] = el}\n                        className=\"char__item\"\n                        key={i}\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }}\n                        onKeyDown={e => {\n                            if (e.key === ' ' || e.key === \"Enter\") {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                        }}}>\n                            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                            <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n    \n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading  && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none': 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar()\n    }, [props.charId])\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const skeleton = char || loading || error ? null : <Skeleton/>;\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }                \n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { Component } from 'react';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n\n    componentDidCatch(error, errorInfo) {\n        console.log(error, errorInfo);\n        this.setState({\n            error: true\n        })\n    }\n\n    render() {\n        if (this.state.error) {\n            return <ErrorMessage/>\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import {useState} from 'react';\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport {Link} from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charSearch.scss';\n\nconst CharSearch = () => {\n    const [char, setChar] = useState(null);\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = (name) => {\n        clearError();\n\n        getCharacterByName(name)\n            .then(onCharLoaded);\n    }//запрос на поиск персонажа по имени\n\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;//вывод ошибки\n    const results = !char ? null : char.length > 0 ?\n                    <div className=\"char__search-wrapper\">\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\n                            <div className=\"inner\">To page</div>\n                        </Link>\n                    </div> : \n                    <div className=\"char__search-error\">\n                        The character was not found. Check the name and try again\n                    </div>;\n\n    return (\n        <div className=\"char__search-form\">\n            <Formik\n                initialValues = {{\n                    charName: ''\n                }}\n                validationSchema = {Yup.object({\n                    charName: Yup.string().required('This field is required')\n                })}\n                onSubmit = { ({charName}) => {\n                    updateChar(charName);\n                }}\n            >\n                <Form>\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\n                    <div className=\"char__search-wrapper\">\n                        <Field \n                            id=\"charName\" \n                            name='charName' \n                            type='text' \n                            placeholder=\"Enter name\"/>\n                        <button \n                            type='submit' \n                            className=\"button button__main\"\n                            disabled={loading}>\n                            <div className=\"inner\">find</div>\n                        </button>\n                    </div>\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\n                </Form>\n            </Formik>\n            {results}\n            {errorMessage}\n        </div>\n    )\n}\n\nexport default CharSearch;","import { useState } from \"react\";\nimport { Helmet } from \"react-helmet\";\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\nimport CharSearch from \"../charSearch/CharSearch\";\n\nimport decoration from '../../resources/img/vision.png';\n\nconst MainPage = () => {\n    const [selectedChar, setChar] = useState(null)\n\n    const onCharSelected = (id) => {\n        setChar(id);\n    };\n\n    return (\n        <>\n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content=\"Marvel information\"/>\n                <title>Marvel information</title>\n            </Helmet>\n            <ErrorBoundary>\n                <RandomChar/>\n            </ErrorBoundary>\n            <div className=\"char__content\">\n                <ErrorBoundary>\n                    <CharList onCharSelected={onCharSelected}/>\n                </ErrorBoundary>\n                <div>\n                    <ErrorBoundary>\n                        <CharInfo charId={selectedChar}/>\n                    </ErrorBoundary>\n                    <ErrorBoundary>\n                        <CharSearch/>\n                    </ErrorBoundary>\n                </div>\n            </div>\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\n        </>\n    )\n}\n\nexport default MainPage;","import {useState, useCallback} from 'react';\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-type': 'application/json'}) => {\n        \n        setLoading(true);\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            setLoading(false);\n            return data;\n        } catch (e) {\n            setLoading(false);\n            setError(e.message);\n            throw e;\n        }\n\n    }, []);\n\n    const clearError = useCallback(() => setError(null), []);\n\n    return {loading, request, error, clearError};\n}","export const _apiKey = 'd3f13d11d5d4eae693a008e15495c081';\nexport const _apiBase = 'https://gateway.marvel.com:443/v1/public/'","import { useHttp } from \"../hooks/http.hook\";\nimport {_apiKey, _apiBase} from \"../resources/apiKey\";\n\nconst useMarvelService = () => {\n\tconst { loading, request, error, clearError } = useHttp();\n\tconst _baseOffset = 210;\n\n\tconst getAllCharacters = async (offset = _baseOffset) => {\n\t\tconst res = await request(\n\t\t\t`${_apiBase}characters?limit=9&offset=${offset}&apikey=${_apiKey}`\n\t\t);\n\t\treturn res.data.results.map(_transformCharacter);\n\t};\n\n\t// Вариант модификации готового метода для поиска по имени.\n\t// Вызывать его можно вот так: getAllCharacters(null, name)\n\n\t// const getAllCharacters = async (offset = _baseOffset, name = '') => {\n\t//     const res = await request(`${_apiBase}characters?limit=9&offset=${offset}${name ? `&name=${name}` : '' }&${_apiKey}`);\n\t//     return res.data.results.map(_transformCharacter);\n\t// }\n\n\t// Или можно создать отдельный метод для поиска по имени\n\n\tconst getCharacterByName = async (name) => {\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&apikey=${_apiKey}`);\n\t\treturn res.data.results.map(_transformCharacter);\n\t};\n\n\tconst getCharacter = async (id) => {\n\t\tconst res = await request(`${_apiBase}characters/${id}?apikey=${_apiKey}`);\n\t\treturn _transformCharacter(res.data.results[0]);\n\t};\n\n\tconst getAllComics = async (offset = 0) => {\n\t\tconst res = await request(\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&apikey=${_apiKey}`\n\t\t);\n\t\treturn res.data.results.map(_transformComics);\n\t};\n\n\tconst getComic = async (id) => {\n\t\tconst res = await request(`${_apiBase}comics/${id}?apikey=${_apiKey}`);\n\t\treturn _transformComics(res.data.results[0]);\n\t};\n\n\tconst _transformCharacter = (char) => {\n\t\treturn {\n\t\t\tid: char.id,\n\t\t\tname: char.name,\n\t\t\tdescription: char.description\n\t\t\t\t? `${char.description.slice(0, 210)}...`\n\t\t\t\t: \"There is no description for this character\",\n\t\t\tthumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n\t\t\thomepage: char.urls[0].url,\n\t\t\twiki: char.urls[1].url,\n\t\t\tcomics: char.comics.items,\n\t\t};\n\t};\n\n\tconst _transformComics = (comics) => {\n\t\treturn {\n\t\t\tid: comics.id,\n\t\t\ttitle: comics.title,\n\t\t\tdescription: comics.description || \"There is no description\",\n\t\t\tpageCount: comics.pageCount\n\t\t\t\t? `${comics.pageCount} p.`\n\t\t\t\t: \"No information about the number of pages\",\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\n\t\t\tprice: comics.prices[0].price\n\t\t\t\t? `${comics.prices[0].price}$`\n\t\t\t\t: \"not available\",\n\t\t};\n\t};\n\n\treturn {\n\t\tloading,\n\t\terror,\n\t\tclearError,\n\t\tgetAllCharacters,\n\t\tgetCharacterByName,\n\t\tgetCharacter,\n\t\tgetAllComics,\n\t\tgetComic,\n\t};\n};\n\nexport default useMarvelService;"],"names":["ErrorMessage","_jsx","src","img","alt","style","display","width","height","objectFit","margin","View","_ref","char","name","description","thumbnail","homepage","wiki","imgStyle","includes","_jsxs","className","children","href","RandomChar","setChar","useState","loading","error","getCharacter","clearError","useMarvelService","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","async","ended","newCharList","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyDown","e","key","TransitionGroup","component","renderItems","disabled","Skeleton","_Fragment","comics","charId","skeleton","ErrorBoundary","Component","constructor","arguments","state","componentDidCatch","errorInfo","console","log","this","setState","render","CharSearch","getCharacterByName","results","Link","to","concat","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","MainPage","selectedChar","Helmet","CharList","CharInfo","decoration","_apiKey","_apiBase","request","useHttp","setLoading","setError","useCallback","url","method","undefined","body","headers","response","fetch","ok","Error","status","data","json","message","_transformCharacter","slice","path","extension","urls","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","res","getAllComics","getComic"],"sourceRoot":""}