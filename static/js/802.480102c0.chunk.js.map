{"version":3,"file":"static/js/802.480102c0.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/pages/SingleComic/SingleComicPage.js","hooks/http.hook.js","resources/apiKey.js","services/MarvelService.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className='app_banner'>\n            <img src={avengers} alt='Avengers'/>\n            <div className=\"app_banner-text\">\n                New comics every week!<br/>\n                Stay turned!\n            </div> \n            <img src={avengersLogo} alt='Avengers logo'/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from \"./error.gif\";\n\nconst ErrorMessage = () => {\n    return (\n        <img src={img} alt=\"Error\" style={{ display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto' }} />\n    )\n}\n\nexport default ErrorMessage;","import { useParams, Link } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\n\nimport Spinner from '../../spinner/Spinner';\nimport ErrorMessage from '../../errorMessage/ErrorMessage';\nimport useMarvelService from '../../../services/MarvelService';\nimport AppBanner from '../../appBanner/AppBanner';\nimport './singleComicPage.scss';\n\nconst SingleComicPage = () => {\n    const {comicId} = useParams();\n    const [comic, setComic] = useState(null);\n    const {loading, error, getComic, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateComic()\n    }, [comicId]);\n\n    const updateComic = () => {\n        clearError();\n        getComic(comicId)\n            .then(onComicLoaded)\n    }\n\n    const onComicLoaded = (comic) => {\n        setComic(comic);\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !comic) ? <View comic={comic}/> : null;\n\n    return (\n        <>\n            <AppBanner/>\n            {errorMessage}\n            {spinner}\n            {content}\n        </>\n    )\n}\n\nconst View = ({comic}) => {\n    const {title, description, pageCount, thumbnail, language, price} = comic;\n\n    return (\n        <div className=\"single-comic\">\n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content={`${title} comics book`}/>\n                <title>{title}</title>\n            </Helmet>\n            <img src={thumbnail} alt={title} className=\"single-comic__img\"/>\n            <div className=\"single-comic__info\">\n                <h2 className=\"single-comic__name\">{title}</h2>\n                <p className=\"single-comic__descr\">{description}</p>\n                <p className=\"single-comic__descr\">{pageCount}</p>\n                <p className=\"single-comic__descr\">Language: {language}</p>\n                <div className=\"single-comic__price\">{price}</div>\n            </div>\n            <Link to=\"/comics/\" className=\"single-comic__back\">Back to all</Link>\n        </div>\n    )\n}\n\nexport default SingleComicPage;","import {useState, useCallback} from 'react';\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-type': 'application/json'}) => {\n        \n        setLoading(true);\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            setLoading(false);\n            return data;\n        } catch (e) {\n            setLoading(false);\n            setError(e.message);\n            throw e;\n        }\n\n    }, []);\n\n    const clearError = useCallback(() => setError(null), []);\n\n    return {loading, request, error, clearError};\n}","export const _apiKey = 'd3f13d11d5d4eae693a008e15495c081';\nexport const _apiBase = 'https://gateway.marvel.com:443/v1/public/'","import { useHttp } from \"../hooks/http.hook\";\nimport {_apiKey, _apiBase} from \"../resources/apiKey\";\n\nconst useMarvelService = () => {\n\tconst { loading, request, error, clearError } = useHttp();\n\tconst _baseOffset = 210;\n\n\tconst getAllCharacters = async (offset = _baseOffset) => {\n\t\tconst res = await request(\n\t\t\t`${_apiBase}characters?limit=9&offset=${offset}&apikey=${_apiKey}`\n\t\t);\n\t\treturn res.data.results.map(_transformCharacter);\n\t};\n\n\t// Вариант модификации готового метода для поиска по имени.\n\t// Вызывать его можно вот так: getAllCharacters(null, name)\n\n\t// const getAllCharacters = async (offset = _baseOffset, name = '') => {\n\t//     const res = await request(`${_apiBase}characters?limit=9&offset=${offset}${name ? `&name=${name}` : '' }&${_apiKey}`);\n\t//     return res.data.results.map(_transformCharacter);\n\t// }\n\n\t// Или можно создать отдельный метод для поиска по имени\n\n\tconst getCharacterByName = async (name) => {\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&apikey=${_apiKey}`);\n\t\treturn res.data.results.map(_transformCharacter);\n\t};\n\n\tconst getCharacter = async (id) => {\n\t\tconst res = await request(`${_apiBase}characters/${id}?apikey=${_apiKey}`);\n\t\treturn _transformCharacter(res.data.results[0]);\n\t};\n\n\tconst getAllComics = async (offset = 0) => {\n\t\tconst res = await request(\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&apikey=${_apiKey}`\n\t\t);\n\t\treturn res.data.results.map(_transformComics);\n\t};\n\n\tconst getComic = async (id) => {\n\t\tconst res = await request(`${_apiBase}comics/${id}?apikey=${_apiKey}`);\n\t\treturn _transformComics(res.data.results[0]);\n\t};\n\n\tconst _transformCharacter = (char) => {\n\t\treturn {\n\t\t\tid: char.id,\n\t\t\tname: char.name,\n\t\t\tdescription: char.description\n\t\t\t\t? `${char.description.slice(0, 210)}...`\n\t\t\t\t: \"There is no description for this character\",\n\t\t\tthumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n\t\t\thomepage: char.urls[0].url,\n\t\t\twiki: char.urls[1].url,\n\t\t\tcomics: char.comics.items,\n\t\t};\n\t};\n\n\tconst _transformComics = (comics) => {\n\t\treturn {\n\t\t\tid: comics.id,\n\t\t\ttitle: comics.title,\n\t\t\tdescription: comics.description || \"There is no description\",\n\t\t\tpageCount: comics.pageCount\n\t\t\t\t? `${comics.pageCount} p.`\n\t\t\t\t: \"No information about the number of pages\",\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\n\t\t\tprice: comics.prices[0].price\n\t\t\t\t? `${comics.prices[0].price}$`\n\t\t\t\t: \"not available\",\n\t\t};\n\t};\n\n\treturn {\n\t\tloading,\n\t\terror,\n\t\tclearError,\n\t\tgetAllCharacters,\n\t\tgetCharacterByName,\n\t\tgetCharacter,\n\t\tgetAllComics,\n\t\tgetComic,\n\t};\n};\n\nexport default useMarvelService;"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","img","style","display","width","height","objectFit","margin","View","_ref","comic","title","description","pageCount","thumbnail","language","price","Helmet","name","content","concat","Link","to","SingleComicPage","comicId","useParams","setComic","useState","loading","error","getComic","clearError","useMarvelService","useEffect","updateComic","then","onComicLoaded","errorMessage","spinner","Spinner","_Fragment","_apiKey","_apiBase","request","useHttp","setLoading","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","status","data","json","e","message","_transformCharacter","char","id","slice","path","extension","homepage","urls","wiki","comics","items","_transformComics","_comics$textObjects$","textObjects","prices","getAllCharacters","offset","results","map","getCharacterByName","getCharacter","res","getAllComics"],"sourceRoot":""}